@startuml
actor User
participant ":DeleteIncomeCommand" as DeleteIncomeCommand
participant ":Income" as Income
participant ":InvalidNumberFormatException" as InvalidNumberFormatException

User -> DeleteIncomeCommand: Create command(input)
activate DeleteIncomeCommand



DeleteIncomeCommand -> DeleteIncomeCommand : checkEmptyIndex(indexString)
activate DeleteIncomeCommand
opt incomeIndex is empty
DeleteIncomeCommand -> InvalidNumberFormatException : throw InvalidNumberFormatException(ERROR_EMPTY_INDEX)
activate InvalidNumberFormatException
InvalidNumberFormatException --> DeleteIncomeCommand
deactivate InvalidNumberFormatException
end
DeleteIncomeCommand --> DeleteIncomeCommand
deactivate DeleteIncomeCommand


DeleteIncomeCommand -> DeleteIncomeCommand : parse incomeIndex to int
activate DeleteIncomeCommand
DeleteIncomeCommand --> DeleteIncomeCommand
deactivate DeleteIncomeCommand

DeleteIncomeCommand -> DeleteIncomeCommand : checkValidIndex(incomes, index)
activate DeleteIncomeCommand
opt index < 0 || index >= incomes.size()
DeleteIncomeCommand -> InvalidNumberFormatException : throw InvalidNumberFormatException(ERROR_INVALID_EXPENSE_INDEX)
activate InvalidNumberFormatException
InvalidNumberFormatException --> DeleteIncomeCommand
deactivate InvalidNumberFormatException
end
DeleteIncomeCommand --> DeleteIncomeCommand
deactivate DeleteIncomeCommand

DeleteIncomeCommand -> Income: print description and amount for given index
activate Income
Income --> DeleteIncomeCommand
deactivate Income

DeleteIncomeCommand --> User
deactivate DeleteIncomeCommand
@enduml